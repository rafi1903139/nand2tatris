
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    // modify x
    Mux16(a=x,b=false, sel=zx, out=x1);
    Not16(in=x1, out=notX1);
    Mux16(a=x1, b=notX1, sel=nx, out=x2);

    // modify y
    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=notY1);
    Mux16(a=y1, b=notY1, sel=ny, out=y2);

    // implement output function
    Add16(a=x2, b=y2, out=x2ADDy2);
    And16(a=x2, b=y2, out=x2ANDy2);
    Mux16(a=x2ANDy2, b=x2ADDy2, sel=f, out=tempOut);

    // modify the output
    Not16(in=tempOut, out=notTempout);
    Mux16(a=tempOut, b=notTempout, sel=no, out=out1);

    // check if the output zero

    // divide the output into part
    Or16(a=false, b=out1, out[0..7]=lower);
    Or16(a=false, b=out1, out[8..15]=higher);

    Or8Way(in=lower, out=zr1);
    Or8Way(in=higher, out=zr2);
    Or(a=zr1, b=zr2, out=zr3);
    Not(in=zr3, out=zr);

    // check if the output is negative
    And16(a=out1, b=true, out[15]=ng);

    // connect to the ouput pin
    Or16(a=out1, b=false, out=out);
}
