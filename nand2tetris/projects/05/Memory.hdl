
/** 
 * The Memory chip implements the complete address space of the Hack data memory,
 * including the RAM and memory mapped I/O.
 * Outputs the value of the memory location specified by the address input.
 * If (load == 1), sets the memory location specified by the address input
 * to the value of the in input.
 * Address space rules:
 * Only the upper 16K + 8K + 1 words of the memory are used.
 * Access to address 0 to 16383 results in accessing the RAM;
 * Access to address 16384 to 24575 results in accessing the Screen memory map;
 * Access to address 24576 results in accessing the Keyboard memory map.
 */ 
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    //// Replace this comment with your code.
    // 0 to 16383(011111111111111) for RAM
    // 16384(100000000000000) to 24575(101111111111111) for Screen
    // 24576(110000000000000) for Keyboard

    /*
        if 15th bit is low goto RAM
        not(input[15])

        if 15th bit is high and 14th bit is low goto screen
        input[15] and not(input[14]) 

        if both 15th bit and 14th bit is high and all the other bit is low goto keyboard 
        input[15] and input[14] and not(bitwiseor(input[0..13]))
    */ 

    Mux(a=load, b=false, sel=address[14], out=loadRamOut);
    RAM16K(in=in, load=loadRamOut, address=address[0..13], out=RamOut1);
    Mux16(a=RamOut1, b=false, sel=address[14], out=RamOut2); // final 

    Not(in=address[13], out=flag);
    And(a=flag, b=address[14], out=ScreenSelect);
    Mux(a=false, b=load, sel=ScreenSelect, out=loadScreenOut);
    Screen(in=in, load=loadScreenOut, address=address[0..12], out=ScreenOut1);
    Mux16(a=false, b=ScreenOut1, sel=ScreenSelect, out=ScreenOut2); // final 

    And(a=address[14], b=address[13], out=KeySelect1);
    Or8Way(in=address[0..7], out=out1);
    Or8Way(in[0..4]=address[8..12], out=out2);
    Or(a=out1, b=out2, out=flag1);
    Not(in=flag1, out=flag2);
    And(a=KeySelect1, b=flag2, out=KeySelect);
    Keyboard(out=Keyout1);
    Mux16(a=false, b=Keyout1, sel=KeySelect, out=KeyOut2); // final 

    Or16(a=RamOut2, b=ScreenOut2, out=finalOut1);
    Or16(a=finalOut1, b=KeyOut2, out=out);

}
