/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Mux16(a=instruction, b=ALUoutput, sel=instruction[15], out=Ainput);
    
    // A register
    Not(in=instruction[15], out=AInsFlag);
    Mux(a=AInsFlag, b=instruction[5], sel=instruction[15], out=AFlag);
    ARegister(in=Ainput, load=AFlag, out=Aout);

    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUinputy);

    // D register
    And(a=instruction[15], b=instruction[4], out=DFlag);
    DRegister(in=ALUoutput, load=DFlag, out=ALUinputx);

    // ALU configure
    ALU(x=ALUinputx, y=ALUinputy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],out=ALUoutput, zr=Zeroflag, ng=Ngflag);
    Or16(a=ALUoutput, b=false, out=outM);
    Or16(a=Aout, b=false, out[0..14]=addressM);




    // handle jump instruction 

    Not(in=instruction[2], out=Abar);
    Not(in=instruction[1], out=Bbar);
    Not(in=instruction[0], out=Cbar);
    Not(in=Zeroflag, out=Dbar);
    Not(in=Ngflag, out=Ebar);

    And(a=Abar, b=Bbar, out=t1);
    And(a=t1, b=instruction[0], out=t2);
    And(a=t2, b=Dbar, out=t3);
    And(a=t3, b=Ebar, out=i1);

    And(a=Abar, b=instruction[1], out=t4);
    And(a=t4, b=Cbar, out=t5);
    And(a=t5, b=Zeroflag, out=t6);
    And(a=t6, b=Ebar, out=i2);

    And(a=Abar, b=instruction[1], out=t7);
    And(a=t7, b=instruction[0], out=t8);
    And(a=t8, b=Ebar, out=i3);

    And(a=instruction[2], b=Bbar, out=t10);
    And(a=t10, b=Cbar, out=t11);
    And(a=t11, b=Dbar, out=t12);
    And(a=t12, b=Ngflag, out=i4);

    And(a=instruction[2], b=Bbar, out=t13);
    And(a=t13, b=instruction[0], out=t14);
    And(a=t14, b=Dbar, out=i5);

    And(a=instruction[2], b=instruction[1], out=t15);
    And(a=t15, b=Cbar, out=t16);
    Or(a=Ngflag, b=Zeroflag, out=t17);
    And(a=t17, b=t16, out=i6);

    And(a=instruction[2], b=instruction[1], out=t18);
    And(a=t18, b=instruction[0], out=i7);


    Or8Way(in[1]=i1, in[2]=i2, in[3]=i3, in[4]=i4, in[5]=i5, in[6]=i6,in[7]=i7, out=JmpFlag);
    And(a=JmpFlag, b=instruction[15], out=JmpSelect);


    PC(in=Aout, load=JmpSelect , inc=true,  reset=reset , out[0..14]=pc);
        
    And(a=instruction[3], b=instruction[15], out=writeMFlag);
    And(a=instruction[3], b=writeMFlag, out=writeM);

}

