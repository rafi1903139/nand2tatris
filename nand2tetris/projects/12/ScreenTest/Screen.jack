// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array s0;
    static int s1;
    static boolean s2;


    /** Initializes the Screen. */
    function void init() {

        var int l0;
        
        let s1 = 16384;
        let s2 = true;
        let s0 = Array.new(17);
        let s0[0] = 1;

        while(l0 < 16){
            let l0 = l0 + 1;
            let s0[l0] = s0[l0 - 1] + s0[l0 - 1];
        }

        return ;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int l0;

        while(l0 < 8192){
            let s1[l0] = 0;
            let l0 = l0 + 1;
        }

        return ;
    }

    function void updateLocation(int arg0, int arg1){
        if(s2){
            let s1[arg0] = s1[arg0] | arg1;
        }
        else {
            let s1[arg0] = s1[arg0] & (~arg1);
        }

        return ;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let s2 = b;
        return ;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int l0, l1, l2;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)){
            do Sys.error(7);

        }

        let l0 = Math.divide(x, 16);
        let l1 = x - Math.multiply(l0, 16);
        let l2 = Math.multiply(y, 32) + l0;

        do Screen.updateLocation(l2, s0[l1]); 


        return ;
    }

    function void drawConditional(int arg0, int arg1, int arg2){
        if(arg2){
            do Screen.drawPixel(arg1, arg0);
        }
        else {
            do Screen.drawPixel(arg0, arg1);
        }
        return ;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {

        var int l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10;

        if((x1 < 0) | (x2 > 511) | (y1 <  0) | (y2 > 255)){
            do Sys.error(8);
        }

        let l3 = Math.abs(x2 - x1);
        let l2 = Math.abs(y2 - y1);

        let l6 = (l3 < l2);
        
        if((l6 & (y2 < y1)) | ((~l6) & (x2 < x1))){
            let l4 = x1;
            let x1 = x2;
            let x2 = l4;

            let l4 = y1;
            let y1 = y2;
            let y2 = l4;
        }

        if(l6){
            let l4 = l3;
            let l3 = l2;
            let l2 = l4;

            let l1 = y1;
            let l0 = x1;
            let l8 = y2;

            let l7 = (x1 > x2);

        }
        else {
            let l1 = x1;
            let l0 = y1;
            let l8 = x2;
            let l7 = (y1 > y2); 
        }

        let l5 = Math.multiply(2, l2) - l3;
        let l9 = Math.multiply(2, l2);
        let l10 = Math.multiply(2, l2 - l3);

        do Screen.drawConditional(l1, l0, l6);

        while(l1 < l8){
            if(l5 < 0){
                let l5 = l5 + l9;
            }
            else {
                let l5 = l5 + l10;

                if(l7){
                    let l0 = l0 - 1;
                }
                else{
                    let l0 = l0 + 1;
                }
            }

            let l1 = l1 + 1;
            
            do Screen.drawConditional(l1, l0, l6);
        }


        return ;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int l0, l1, l2, l3, l4, l5, l6, l7, l8;

        if((x1 > x2) | (y1 > y2) | (x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255)){
            do Sys.error(9);

        }

        let l3 = Math.divide(x1, 16);
        let l7 = x1 - Math.multiply(l3, 16);
        let l4 = Math.divide(x2,16);
        let l8 = x2 - Math.multiply(l4, 16);

        let l6 = ~(s0[l7] - 1);
        let l5 = s0[l8 + 1] - 1;

        let l0 = Math.multiply(y1, 32) + l3;
        let l2 = l4 - l3;


        while(~(y1 > y2)){
            let l1 = l0 + l2;

            if(l2 = 0){
                do Screen.updateLocation(l0, (l5 & l6));
            }
            else{
                do Screen.updateLocation(l0, l6);
                let l0 = l0 + 1;

                while(l0 < l1){
                    do Screen.updateLocation(l0, -1);
                    let l0 = l0 + 1;
                }

                do Screen.updateLocation(l1, l5);
            }
            let y1 = y1 + 1;
            let l0 = l1 + 32 - l2;

        }

        return ;
    }


    function void drawHorizontal(int arg0, int arg1, int arg2){
        var int l0, l1, l2, l3, l4, l5, l6, l7, l8, l9, l10;

        let l7 = Math.min(arg1, arg2);
        let l8 = Math.max(arg1, arg2);
        if((arg0 > (-1)) & (arg0 < 256) & (l7 < 512) &  (l8 > (-1))){
            let l7 = Math.max(l7, 0);
            let l8 = Math.min(l8, 511);
            let l1 = Math.divide(l7, 16);
            let l9 = l7 - Math.multiply(l1, 16); 
            let l2 = Math.divide(l8, 16);
            let l10 = l8 - Math.multiply(l2, 16);

            let l5 = ~(s0[l9] - 1);

            let l4 = s0[l10 + 1] - 1;

            let l0 = Math.multiply(arg0, 32) + l1;

            let l6 = l2 -l1;
            let l3 = l0 + l6;

            if(l6 = 0){
                do Screen.updateLocation(l0, l4 & l5);
            }
            else {
                do Screen.updateLocation(l0, l5);

                let l0 = l0 + 1;

                while(l0 < l3){
                    do Screen.updateLocation(l0, -1);

                    let l0 = l0 + 1;
                }

                do Screen.updateLocation(l3, l4);

            }
        }

        return ;
    }

    function void drawSymetric(int arg0, int arg1, int arg2, int arg3){
        
        do Screen.drawHorizontal((arg1 - arg3),(arg0 + arg2), (arg0 - arg2));

        do Screen.drawHorizontal((arg1 + arg3), (arg0 + arg2), (arg0 - arg2));

        do Screen.drawHorizontal((arg1 - arg2), (arg0 - arg3), (arg0 + arg3));

        do Screen.drawHorizontal((arg1 + arg2), (arg0 - arg3), (arg0 + arg3));

        return ;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {

        var int l0, l1, l2;

        if((x < 0) | (x > 511) | (y < 0) | (y > 255)){
            do Sys.error(12);
        }


        if(((x - r) < 0) | ((x + r) > 511) | ((y - r) < 0) | ((y + r) > 255)){
            do Sys.error(13);
        }

        let l1 = r;
        let l2 = 1 - r;

        do Screen.drawSymetric(x, y, l0, l1);

        while(l1 > l0){
            if(l2 < 0){
                let l2 = l2 + Math.multiply(2, l0) + 3;

            }
            else{
                let l2 = l2 + Math.multiply(2, l0 - l1) + 5;
                let l1 = l1 - 1;
            }
            let l0 = l0 + 1;

            do Screen.drawSymetric(x, y, l0, l1);
        }



        return ;
    }
}
