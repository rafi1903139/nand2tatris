// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i, power;

        // store the 2 to power i in ith index of powersOfTwo
        let powersOfTwo = Array.new(16);

        let i = 0;
        let power = 1;

        while (i < 16){
            let powersOfTwo[i] = power;
            let power = power + power;
            let i = i + 1;
        } 

        return ;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;

        while (i < 16){
           if (Math.bit(y, i)){
            let sum = sum + shiftedx;
           } 
           
           let shiftedx = shiftedx + shiftedx;

           let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

        var int q;

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, 2 * y);

        if ((x - (2 * q * y)) < y) {
            return 2 * q;
        }
        else {
            return 2 * q + 1;
        }


    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int y, i;

        let y = 0;
        let i = 7;  // n/2 - 1 = 8

        while (i > -1){
            if ((y + powersOfTwo[i]) < x ) {
                let y = y + powersOfTwo[i];

            }            
            
            let i = i - 1;
        }

        return y;

    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {

        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {

        if (a < b){
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {

        if (x < 0){
            return -x;
        }
        else{
            return x;
        }
    }


    // return true if the ith bit is set 
    function boolean bit(int x, int i){
        var int temp;
        let temp = x & powersOfTwo[i];

        if (temp = 0){
            return false;
        }
        else{
            return true;
        }
    }
}
