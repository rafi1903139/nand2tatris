// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    // creates a jack level proxy of the ram
    static Array memory;

    

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let memory[2048] = 14334; // heapbase 
        let memory[2049] = 2050; // next available memory address
        return ;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;

        return ;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {

        var Array temp;

        if (size < 1) {
            // throw error
            do Sys.error(5);
        }
        
        let temp = 2048;

        // find available memeory
        while(temp[0] < size) {
            let temp = temp[1];
        }

        if(temp + size > 16379) {
            do Sys.error(6);
        }

        
        if(temp[0] > (size + 2)){
            // create available memory 
            let temp[size + 2] = temp[0] - size - 2; // allocated memory size
            
            if (temp[1] = (temp + 2)){
                let temp[size + 3] = temp + size + 4; // next free memory location 
            }
            else {
                let temp[size + 3] = temp[1];  
            }

            let temp[1] = temp + size + 2;

        }
        
        let temp[0] = 0;
        
        

        return temp + 2;                       
    

       

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {

        var Array temp, nextLoc;
        let temp = o - 2;

        let nextLoc = temp[1];

        if (nextLoc[0] = 0) {
            let temp[0] = temp[1] - temp - 2;
        }
        else {
            let temp[0] = temp[1] - temp + nextLoc[0];
            if (nextLoc[1] = (nextLoc + 2)) {
                let temp[1] = temp + 2;
            }
            else {
                let temp[1] = nextLoc[1];
            }
        }

        return ;
    }    
}
