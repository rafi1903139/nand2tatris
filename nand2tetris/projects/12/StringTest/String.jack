// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int currentLength, length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        // allocating space to newly created string
        let str = Array.new(maxLength + 1);
        let length = maxLength;
        let currentLength = 0;

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);

        return ;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;

        return ;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
       // if (currentLength = length) {
       //     do Output.printString(str);
       //     // raise error 
       //     do Sys.error(3); // dummy value needs to be changed 
       // }
        let str[currentLength] = c;
        let currentLength = currentLength + 1;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLength = 0){
            do Sys.error(1);
        }
        else{
            let currentLength = currentLength - 1;
        }

        return ;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, len;

        let val = 0;
        let len = 0;

        if (str[0] = 45){
            let len = 1; 
        }

        while (len < currentLength) {
            
            let val = (val * 10) + ((charAt(len) - 48)); 
            let len = len + 1;
        }

        if (str[0] = 45){
            let val = -val;
        }

        return val;


    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let currentLength = 0;
        
        if (val < 0) {
            do appendChar(45);
            let val = -val; 
        }
        do intToString(val);
        

        return ;
    }

    method void intToString(int val) {
        var int lastDigit;

        let lastDigit = val - (val / 10 * 10); // get the last digit
        let lastDigit = lastDigit + 48; // character representation

        if(val < 10) {
           do appendChar(val + 48); 
        }
        else {
            do intToString(val / 10);
            do appendChar(lastDigit);
        }

        return ;

    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
